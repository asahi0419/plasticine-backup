export default {
  name: 'View',
  plural: 'Views',
  alias: 'view',
  type: 'core',
  template: 'base',
  access_script: 'p.currentUser.canAtLeastRead()',
  order: '-100',
  __lock: ['delete'],
  fields: [
    {
      name: 'Model',
      alias: 'model',
      type: 'reference',
      options: { foreign_model: 'model', foreign_label: 'name' },
      required_when_script: 'true',
      __lock: ['delete'],
    },
    { name: 'Name', alias: 'name', type: 'string', required_when_script: 'true', __lock: ['delete'] },
    {
      name: 'Alias',
      alias: 'alias',
      type: 'string',
      index: 'unique',
      options: { composite_index: ['model'], format: '^[a-zA-Z0-9_]+$' },
      required_when_script: 'true',
      __lock: ['delete'],
    },
    {
      name: 'Type',
      alias: 'type',
      type: 'array_string',
      options: {
        values: {
          grid: 'Grid',
          map: 'Map',
          chart: 'Chart',
          card: 'Card',
          calendar: 'Calendar',
          topology: 'Topology Diagram',
        },
      },
      required_when_script: 'true',
      readonly_when_script: `!!p.record.getValue('type')`,
      __lock: ['delete'],
    },
    { name: 'Order', alias: 'order', type: 'integer', options: { default: 0 }, __lock: ['delete'] },
    { name: 'Condition script', alias: 'condition_script', type: 'condition', options: { length: 150000, syntax_hl: 'js' }, __lock: ['delete'] },
    {
      name: 'Layout',
      alias: 'layout',
      type: 'reference',
      options: {
        foreign_model: 'layout',
        foreign_label: 'name',
        depends_on: ['model', 'type'],
      },
      readonly_when_script: `!p.record.getValue('type')`,
      required_when_script: `['grid', 'card'].includes(p.record.getValue('type'));`,
      hidden_when_script: `!['grid', 'card'].includes(p.record.getValue('type'));`,
      __lock: ['delete'],
    },
    {
      name: 'Appearance',
      alias: 'appearance',
      type: 'reference',
      options: {
        foreign_model: 'appearance',
        foreign_label: 'name',
        depends_on: ['model', 'type'],
      },
      required_when_script: `['map', 'calendar', 'topology'].includes(p.record.getValue('type'));`,
      hidden_when_script: `!['grid', 'map', 'calendar', 'topology'].includes(p.record.getValue('type'));`,
      __lock: ['delete'],
    },
    {
      name: 'Filter',
      alias: 'filter',
      type: 'reference',
      options: {
        foreign_model: 'filter',
        foreign_label: 'name',
        depends_on: ['model'],
      },
      __lock: ['delete'],
    },
    {
      name: 'Chart',
      alias: 'chart',
      type: 'reference',
      options: { foreign_model: 'chart', foreign_label: 'name' },
      required_when_script: `['chart'].includes(p.record.getValue('type'));`,
      hidden_when_script: `!['chart'].includes(p.record.getValue('type'));`,
      __lock: ['delete'],
    },
    {
      name: 'Filters',
      alias: 'predefined_filters',
      type: 'reference_to_list',
      options: {
        foreign_model: 'filter',
        foreign_label: 'name',
        depends_on: ['model'],
      },
      __lock: ['delete'],
    },
    {
      name: 'Options',
      alias: 'options',
      type: 'string',
      options: { length: 10000 },
      __lock: ['delete'],
    },
    {
      name: 'Tutorial',
      alias: 'tutorial',
      type: 'string',
      options: {
        length: 1000,
        rows: 1,
      },
      required_when_script: 'false',
      __lock: ['delete'],
    },
    {
      name: 'Filter panel enabled',
      alias: 'filter_panel_enabled',
      type: 'boolean',
      options: { default: true },
      __lock: ['delete'],
    },
    {
      name: 'Quick search enabled',
      alias: 'quick_search_enabled',
      type: 'boolean',
      options: { default: true },
      __lock: ['delete'],
    },
    {
      name: 'Paginator enabled',
      alias: 'paginator_enabled',
      type: 'boolean',
      options: { default: true },
      hidden_when_script: '!["grid", "card"].includes(p.record.getValue("type"));',
      __lock: ['delete'],
    },
    {
      name: 'Sorting enabled',
      alias: 'sorting_enabled',
      type: 'boolean',
      options: { default: true },
      hidden_when_script: 'p.record.getValue("type") !== "card"',
      __lock: ['delete'],
    },
    {
      name: 'Auto refresh enabled',
      alias: 'auto_refresh_enabled',
      type: 'boolean',
      options: { default: false },
      __lock: ['delete'],
    },
    {
      name: 'Group actions enabled',
      alias: 'group_actions_enabled',
      type: 'boolean',
      options: { default: true },
      hidden_when_script: 'p.record.getValue("type") !== "grid"',
      __lock: ['delete'],
    },
    {
      name: 'Cell edit enabled',
      alias: 'cell_edit_enabled',
      type: 'boolean',
      options: { default: true },
      hidden_when_script: 'p.record.getValue("type") !== "grid"',
      __lock: ['delete'],
    },
  ],
  ui_rules: [
    {
      name: 'Autogeneration of alias',
      order: '0',
      active: true,
      type: 'on_change',
      script: `if (p.record.isPersisted()) return;
let aliases = [];
if (p.record.getModel && p.record.getModel().fetchRecords) {
  const params = {
    filter: \`\\\`model\\\` = $\{p.record.getValue('model')\} AND \\\`id\\\` != $\{p.record.getValue('id')\}\`,
    fields: { [\`_$\{p.record.getModel().getValue('alias')\}\`]: 'alias' },
    page: { size: 999 },
  };
  p.record.getModel().fetchRecords(params).then((result) => {
    aliases = result.data.data.map(({ attributes }) => attributes.alias);
  });
}
p.record.getField('name').onChange((oldValue, newValue) => {
	const aliasValue = utils.parameterizeString(newValue, { length: 55, blackList: aliases });
	p.record.setValue('alias', aliasValue);
});`,
      __lock: ['delete'],
    },
  ],
  views: [
    {
      name: 'Default',
      alias: 'default',
      type: 'grid',
      condition_script: 'p.currentUser.isAdmin()',
      layout: 'Default',
      filter: 'Default',
      __lock: ['delete'],
    },
  ],
  layouts: [
    {
      name: 'Default',
      type: 'grid',
      options: {
        columns: ['id', 'name', 'alias', 'type', 'order', 'created_at', 'updated_at', 'created_by', 'model'],
        columns_options: {},
        sort_order: [
          { field: 'id', type: 'descending' },
          { field: 'name', type: 'none' },
          { field: 'alias', type: 'none' },
          { field: 'type', type: 'none' },
          { field: 'order', type: 'none' },
          { field: 'created_at', type: 'none' },
          { field: 'updated_at', type: 'none' },
          { field: 'model', type: 'none' },
        ],
        wrap_text: true,
        no_wrap_text_limit: 50,
      },
      __lock: ['delete'],
    },
  ],
  forms: [
    {
      name: 'Default',
      alias: 'default',
      order: 0,
      active: true,
      condition_script: 'true',
      options: {
        components: {
          list: [
            '__tab__.main',
            '__section__.1',
            '__column__.1_1',
            'name',
            'type',
            'order',
            'model',
            'chart',
            '__column__.1_2',
            'alias',
            'layout',
            'appearance',
            'filter',
            '__section__.2',
            'condition_script',
            'options',
            '__tab__.settings',
            '__section__.3',
            'predefined_filters',
            '__section__.4',
            '__column__.4_1',
            'filter_panel_enabled',
            'paginator_enabled',
            'group_actions_enabled',
            '__column__.4_2',
            'quick_search_enabled',
            'auto_refresh_enabled',
            'cell_edit_enabled',
            '__section__.5',
            'tutorial',
            '__tab__.service',
            '__section__.6',
            'id',
            '__section__.7',
            '__column__.7_1',
            'created_at',
            'updated_at',
            '__column__.7_2',
            'created_by',
            'updated_by',
          ],
          options: {
            '__tab__.main': { expanded: true, name: 'Main' },
            '__tab__.settings': { expanded: true, name: 'Settings' },
            '__tab__.service': { name: 'Service' },
          },
        },
        related_components: { list: [], options: {} },
      },
      __lock: ['delete'],
    },
  ],
  permissions: [
    { type: 'model', action: 'create', script: 'p.currentUser.isAdmin()', __lock: ['delete'] },
    { type: 'model', action: 'update', script: 'p.currentUser.isAdmin()', __lock: ['delete'] },
    { type: 'model', action: 'delete', script: 'p.currentUser.isAdmin()', __lock: ['delete'] },
  ],
};
