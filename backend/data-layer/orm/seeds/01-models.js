export default {
  name: 'Model',
  plural: 'Models',
  alias: 'model',
  type: 'core',
  template: 'base',
  access_script: 'p.currentUser.canAtLeastRead() ',
  order: '-100',
  __lock: ['delete'],
  fields: [
    {
      name: 'Name (singular)',
      alias: 'name',
      type: 'string',
      required_when_script: 'true',
      __lock: ['delete'],
    },
    {
      name: 'Name (plural)',
      alias: 'plural',
      type: 'string',
      required_when_script: 'true',
      __lock: ['delete'],
    },
    {
      name: 'Alias',
      alias: 'alias',
      type: 'string',
      index: 'unique',
      required_when_script: 'true',
      readonly_when_script: `p.record.isPersisted() && p.record.getValue('type') === 'core'`,
      options: { format: '^[a-zA-Z0-9_]+$' },
      __lock: ['delete'],
    },
    {
      name: 'Type',
      alias: 'type',
      type: 'array_string',
      options: {
        values: {
          core: 'Core',
          system: 'System',
          custom: 'Custom',
          audit: 'Audit',
          template: 'Template',
          plugin: 'Plugin',
          worklog: 'Worklog',
        },
        default: 'custom',
      },
      required_when_script: 'true',
      readonly_when_script: `p.record.isPersisted() && p.record.getValue('type') === 'core'`,
      __lock: ['delete'],
    },
    {
      name: 'Template',
      alias: 'template',
      type: 'array_string',
      options: { values: { base: 'Base' }, default: 'base' },
      required_when_script: 'true',
      readonly_when_script: 'p.record.isPersisted()',
      __lock: ['delete'],
    },
    {
      name: 'Data template',
      alias: 'data_template',
      type: 'reference',
      options: { foreign_model: 't_cross', foreign_label: 'id' },
      required_when_script: 'p.record.getValue("type") == "template"',
      __lock: ['delete'],
    },
    {
      name: 'Inherits model',
      alias: 'inherits_model',
      type: 'reference',
      options: {
        foreign_model: 'model',
        foreign_label: 'name',
      },
      readonly_when_script: `true`,
      __lock: ['delete'],
    },
    {
      name: 'Access script',
      alias: 'access_script',
      type: 'condition',
      options: { length: 150000, syntax_hl: 'js' },
      readonly_when_script: `p.record.isPersisted() && p.record.getValue('type') === 'core'`,
      __lock: ['delete'],
    },
    {
      name: 'Order',
      alias: 'order',
      type: 'integer',
      options: { default: 0 },
      __lock: ['delete'],
    },
    {
      name: 'Master model',
      alias: 'master_model',
      type: 'reference',
      options: { foreign_model: 'model', foreign_label: 'name' },
      readonly_when_script: 'true',
      __lock: ['delete'],
    },
    {
      name: 'Versionable attachments',
      alias: 'versionable_attachments',
      type: 'boolean',
      options: { default: false },
      required_when_script: 'true',
      __lock: ['delete'],
    },
    {
      name: 'Audit',
      alias: 'audit',
      type: 'array_string',
      options: {
        values: {
          none: 'None',
          create: 'On create',
          delete: 'On delete',
          create_delete: 'Both',
        },
        default: 'none',
      },
      required_when_script: 'true',
      readonly_when_script: `p.record.isPersisted() && p.record.getValue('type') === 'audit'`,
      __lock: ['delete'],
    },
    {
      name: 'Options',
      alias: 'options',
      type: 'string',
      options: { length: 10000, syntax_hl: 'json' },
      __lock: ['delete'],
    },
    {
      name: 'Menu visibility',
      alias: 'menu_visibility',
      type: 'condition',
      options: { length: 150000, syntax_hl: 'js', default: true },
      __lock: ['delete'],
    },
  ],
  actions: [
    {
      name: 'Fields',
      alias: 'fields',
      type: 'form_button',
      position: '1000',
      on_update: true,
      server_script: `const params = p.getRequest();
p.actions.openView('field', 'default', { filter: \`model = \$\{params.record.id\}\` });`,
      options: { group: 'meta' },
      condition_script: 'p.currentUser.canAtLeastRead();',
      active: true,
      __lock: ['delete'],
    },
    {
      name: 'Actions',
      alias: 'actions',
      type: 'form_button',
      position: '990',
      on_update: true,
      server_script: `const params = p.getRequest();
p.actions.openView('action', 'default', { filter: \`model = \$\{params.record.id\}\` });`,
      options: { group: 'meta' },
      condition_script: 'p.currentUser.canAtLeastRead();',
      active: true,
      __lock: ['delete'],
    },
    {
      name: 'Forms',
      alias: 'forms',
      type: 'form_button',
      position: '980',
      on_update: true,
      server_script: `const params = p.getRequest();
p.actions.openView('form', 'default', { filter: \`model = \$\{params.record.id\}\` });`,
      options: { group: 'meta' },
      condition_script: 'p.currentUser.canAtLeastRead();',
      active: true,
      __lock: ['delete'],
    },
    {
      name: 'DB Rules',
      alias: 'db_rule',
      type: 'form_button',
      position: '970',
      on_update: true,
      server_script: `const params = p.getRequest();
p.actions.openView('db_rule', 'default', { filter: \`model = \$\{params.record.id\}\` });`,
      options: { group: 'meta' },
      condition_script: 'p.currentUser.canAtLeastRead();',
      active: true,
      __lock: ['delete'],
    },
    {
      name: 'UI Rules',
      alias: 'ui_rule',
      type: 'form_button',
      position: '960',
      on_update: true,
      server_script: `const params = p.getRequest();
p.actions.openView('ui_rule', 'default', { filter: \`model = \$\{params.record.id\}\` });`,
      options: { group: 'meta' },
      condition_script: 'p.currentUser.canAtLeastRead();',
      active: true,
      __lock: ['delete'],
    },
    {
      name: 'Views',
      alias: 'views',
      type: 'form_button',
      position: '950',
      on_update: true,
      server_script: `const params = p.getRequest();
p.actions.openView('view', 'default', { filter: \`model = \$\{params.record.id\}\` });`,
      options: { group: 'meta' },
      condition_script: 'p.currentUser.canAtLeastRead();',
      active: true,
      __lock: ['delete'],
    },
    {
      name: 'Layouts',
      alias: 'layouts',
      type: 'form_button',
      position: '940',
      on_update: true,
      server_script: `const params = p.getRequest();
p.actions.openView('layout', 'default', { filter: \`model = \$\{params.record.id\}\` });`,
      options: { group: 'meta' },
      condition_script: 'p.currentUser.canAtLeastRead();',
      active: true,
      __lock: ['delete'],
    },
    {
      name: 'Appearances',
      alias: 'appearances',
      type: 'form_button',
      position: '930',
      on_update: true,
      server_script: `const params = p.getRequest();
p.actions.openView('appearance', 'default', { filter: \`model = \$\{params.record.id\}\` });`,
      options: { group: 'meta' },
      condition_script: 'p.currentUser.canAtLeastRead();',
      active: true,
      __lock: ['delete'],
    },
    {
      name: 'Charts',
      alias: 'charts',
      type: 'form_button',
      position: '920',
      on_update: true,
      server_script: `const params = p.getRequest();
p.actions.openView('chart', 'default', { filter: \`data_source = \$\{params.record.id\}\` });`,
      options: { group: 'meta' },
      condition_script: 'p.currentUser.canAtLeastRead();',
      active: true,
      __lock: ['delete'],
    },
    {
      name: 'Filters',
      alias: 'filters',
      type: 'form_button',
      position: '910',
      on_update: true,
      server_script: `const params = p.getRequest();
p.actions.openView('filter', 'default', { filter: \`model = \$\{params.record.id\}\` });`,
      options: { group: 'meta' },
      condition_script: 'p.currentUser.canAtLeastRead();',
      active: true,
      __lock: ['delete'],
    },
    {
      name: 'Permissions',
      alias: 'permissions',
      type: 'form_button',
      position: '900',
      on_update: true,
      server_script: `const params = p.getRequest();
p.actions.openView('permission', 'default', { filter: \`model = \$\{params.record.id\}\` });`,
      options: { group: 'meta' },
      condition_script: 'p.currentUser.canAtLeastRead();',
      active: true,
      __lock: ['delete'],
    },
    {
      name: 'Privileges',
      alias: 'privileges',
      type: 'form_button',
      position: '890',
      on_update: true,
      server_script: `const params = p.getRequest();
const { id, alias } = params.record;
p.actions.openPage('privilege_manager', { model: { id, alias }});`,
      options: { group: 'meta' },
      condition_script: 'p.currentUser.canAtLeastRead();',
      active: true,
      __lock: ['delete'],
    },
    {
      name: 'Meta',
      alias: 'meta',
      type: 'form_button',
      position: '1010',
      group: true,
      on_update: true,
      condition_script: 'p.currentUser.isAdmin();',
      options: {
        icon: 'caret down',
        icon_position: 'right',
      },
      active: true,
      __lock: ['delete'],
    },
  ],
  ui_rules: [
    {
      name: 'Autogeneration of alias',
      order: '0',
      active: true,
      type: 'on_change',
      script: `if (p.record.isPersisted()) return;
let aliases = [];
if (p.record.getModel && p.record.getModel().fetchRecords) {
  const params = {
    filter: \`\\\`type\\\` != 'audit' AND \\\`id\\\` != $\{p.record.getValue('id')\}\`,
    fields: { [\`_$\{p.record.getModel().getValue('alias')\}\`]: 'alias' },
    page: { size: 999 },
  };
  p.record.getModel().fetchRecords(params).then((result) => {
    aliases = result.data.data.map(({ attributes }) => attributes.alias);
  });
}
p.record.getField('name').onChange((oldValue, newValue) => {
	const aliasValue = utils.parameterizeString(newValue, { length: 55, blackList: aliases });
	p.record.setValue('alias', aliasValue);
});`,
      __lock: ['delete'],
    },
    {
      name: 'Actions visibility',
      order: '0',
      active: true,
      type: 'on_load',
      script: `if (p.record.isPersisted()) return;

function processTypeField(value) {
  const actions = ['create', 'save'].map((alias) => p.record.getAction(alias));

  if (['core', 'audit'].includes(value)) {
    actions.forEach((action) => action.setVisible(false));
  } else {
    actions.forEach((action) => action.setVisible(true));
  }
}

processTypeField(p.record.getValue('type'));
p.record.getField('type').onChange((oldValue, newValue) => processTypeField(newValue));`,
      __lock: ['delete'],
    },
  ],
  views: [
    {
      name: 'Default',
      alias: 'default',
      type: 'grid',
      condition_script: 'p.currentUser.isAdmin()',
      layout: 'Default',
      filter: 'Default',
      __lock: ['delete'],
    },
    {
      name: 'Custom',
      alias: 'custom',
      type: 'grid',
      condition_script: 'p.currentUser.isAdmin()',
      layout: 'Default',
      filter: 'Custom',
      __lock: ['delete'],
    },
    {
      name: 'Core',
      alias: 'core',
      type: 'grid',
      condition_script: 'p.currentUser.isAdmin()',
      layout: 'Default',
      filter: 'Core',
      __lock: ['delete'],
    },
    {
      name: 'Audit',
      alias: 'audit',
      type: 'grid',
      condition_script: 'p.currentUser.isAdmin()',
      layout: 'Default',
      filter: 'Audit',
      __lock: ['delete'],
    },
    {
      name: 'Template',
      alias: 'template',
      type: 'grid',
      condition_script: 'p.currentUser.isAdmin()',
      layout: 'Default',
      filter: 'Template',
      __lock: ['delete'],
    },
    {
      name: 'Plugin',
      alias: 'plugin',
      type: 'grid',
      condition_script: 'p.currentUser.isAdmin()',
      layout: 'Default',
      filter: 'Plugin',
      __lock: ['delete'],
    },
    {
      name: 'Worklog',
      alias: 'worklog',
      type: 'grid',
      condition_script: 'p.currentUser.isAdmin()',
      layout: 'Default',
      filter: 'Worklog',
      __lock: ['delete'],
    },
  ],
  layouts: [
    {
      name: 'Default',
      type: 'grid',
      options: {
        columns: ['id', 'name', 'alias', 'type', 'created_at', 'updated_at', 'created_by', 'updated_by'],
        columns_options: {},
        sort_order: [
          { field: 'id', type: 'descending' },
          { field: 'name', type: 'none' },
          { field: 'alias', type: 'none' },
          { field: 'type', type: 'none' },
          { field: 'created_at', type: 'none' },
          { field: 'updated_at', type: 'none' },
          { field: 'created_by', type: 'none' },
          { field: 'updated_by', type: 'none' },
        ],
        wrap_text: true,
        no_wrap_text_limit: 50,
      },
      __lock: ['delete'],
    },
  ],
  forms: [
    {
      name: 'Default',
      alias: 'default',
      order: 0,
      active: true,
      condition_script: 'true',
      options: {
        components: {
          list: [
            '__tab__.main',
            '__section__.1',
            '__column__.1_1',
            'name',
            'plural',
            'order',
            '__column__.1_2',
            'alias',
            'type',
            '__section__.2',
            'access_script',
            'menu_visibility',
            '__tab__.service',
            '__section__.3',
            '__column__.3_1',
            'id',
            'created_at',
            'updated_at',
            'inherits_model',
            'versionable_attachments',
            '__column__.3_2',
            'template',
            'created_by',
            'updated_by',
            'master_model',
            'audit',
            'data_template',
          ],
          options: {
            '__tab__.main': { expanded: true, name: 'Main' },
            '__tab__.service': { name: 'Service' },
          },
        },
        related_components: { list: [], options: {} },
      },
      __lock: ['delete'],
    },
  ],
  filters: [
    {
      name: 'Default',
      query: "`type` IN ('core','custom')",
    },
    {
      name: 'Custom',
      query: "`type` = 'custom'",
    },
    {
      name: 'Core',
      query: "`type` = 'core'",
    },
    {
      name: 'Audit',
      query: "`type` = 'audit'",
    },
    {
      name: 'Template',
      query: "`type` = 'template'",
    },
    {
      name: 'Plugin',
      query: "`type` = 'plugin'",
    },
    {
      name: 'Worklog',
      query: "`type` = 'worklog'",
    },
  ],
  permissions: [
    { type: 'model', action: 'create', script: 'p.currentUser.isAdmin()', __lock: ['delete'] },
    { type: 'model', action: 'update', script: 'p.currentUser.isAdmin()', __lock: ['delete'] },
    { type: 'model', action: 'delete', script: 'p.currentUser.isAdmin()', __lock: ['delete'] },
  ],
};
