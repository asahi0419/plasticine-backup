import XMLWriter from "xml-writer";
import moment from 'moment-timezone';
import { keyBy } from 'lodash-es';

import logger from "../../../../../logger/index.js";
import { DEFAULT_DATE_FORMAT } from "../../../../../constants/index.js";
import { genRawXmlByTemplate } from '../get-view-rawxml/gridview.js';
import { GridBaseTemplate } from '../get-view-rawxml/grid-view-template.js';

var data = {
    grid_cols: "",
    header_row: "",
    body_rows: ""
};

const processWorklog = (worklog, userTimeZone) => {
    let items = []
    worklog.items.forEach((item) => {
        let newItem = item;
        newItem.created_at = moment(item.created_at).utcOffset(userTimeZone).format(DEFAULT_DATE_FORMAT);
        const user = keyBy(worklog.users, 'id')[item.created_by] || { name: item.created_by, id: item.created_by };
        newItem.created_by = `${user.name} ${user.surname}`;
        items.push(newItem);
    })

    return items;
}

export const makeWorklogXml = (worklog = { items: [], users: [] }, userTimeZone) => {
    try {
        const columns = ['Created At', 'Created By', 'Data'];
        const columnKeys = ['created_at', 'created_by', 'data']
        let xw_gridCols = new XMLWriter();
        let xw_header = new XMLWriter();
        let xw_body = new XMLWriter();
        columns.forEach(() => {
            xw_gridCols.startElement("w:gridCol").endElement();
        });
        data.grid_cols = xw_gridCols.output;

        const worklogItems = processWorklog(worklog, userTimeZone);
        // add header row
        xw_header
            .startElement("w:tr")
            .startElement("w:tblPrEx")
            .startElement("w:tblBorders")
            .startElement("w:top")
            .writeAttribute("w:val", "single")
            .writeAttribute("w:color", "b4c7dc")
            .writeAttribute("w:sz", "4")
            .writeAttribute("w:space", "0")
            .endElement()
            .startElement("w:left")
            .writeAttribute("w:val", "single")
            .writeAttribute("w:color", "b4c7dc")
            .writeAttribute("w:sz", "4")
            .writeAttribute("w:space", "0")
            .endElement()
            .startElement("w:bottom")
            .writeAttribute("w:val", "single")
            .writeAttribute("w:color", "b4c7dc")
            .writeAttribute("w:sz", "4")
            .writeAttribute("w:space", "0")
            .endElement()
            .startElement("w:right")
            .writeAttribute("w:val", "single")
            .writeAttribute("w:color", "b4c7dc")
            .writeAttribute("w:sz", "4")
            .writeAttribute("w:space", "0")
            .endElement()
            .startElement("w:insideH")
            .writeAttribute("w:val", "single")
            .writeAttribute("w:color", "b4c7dc")
            .writeAttribute("w:sz", "4")
            .writeAttribute("w:space", "0")
            .endElement()
            .startElement("w:insideV")
            .writeAttribute("w:val", "single")
            .writeAttribute("w:color", "b4c7dc")
            .writeAttribute("w:sz", "4")
            .writeAttribute("w:space", "0")
            .endElement()
            .endElement()
            .startElement("w:tblCellMar")
            .startElement("w:top")
            .writeAttribute("w:w", "15")
            .writeAttribute("w:type", "dxa")
            .endElement()
            .startElement("w:left")
            .writeAttribute("w:w", "15")
            .writeAttribute("w:type", "dxa")
            .endElement()
            .startElement("w:bottom")
            .writeAttribute("w:w", "15")
            .writeAttribute("w:type", "dxa")
            .endElement()
            .startElement("w:right")
            .writeAttribute("w:w", "15")
            .writeAttribute("w:type", "dxa")
            .endElement()
            .endElement()
            .endElement()
            .startElement("w:trPr")
            .startElement("w:trHeight")
            .writeAttribute("w:val", "0")
            .writeAttribute("w:hRule", "atLeast")
            .endElement()
            .startElement("w:tblHeader")
            .endElement()
            .endElement();

        columns.forEach((col) => {
            xw_header
            .startElement("w:tc")
            .startElement("w:tcPr")
            .startElement("w:tcW")
            .writeAttribute("w:w", "0")
            .writeAttribute("w:type", "auto")
            .endElement()
            .startElement("w:tcBorders")
            .startElement("w:top")
            .writeAttribute("w:val", "single")
            .writeAttribute("w:color", "B4C7DC")
            .writeAttribute("w:sz", "4")
            .writeAttribute("w:space", "0")
            .endElement()
            .startElement("w:bottom")
            .writeAttribute("w:val", "single")
            .writeAttribute("w:color", "B4C7DC")
            .writeAttribute("w:sz", "4")
            .writeAttribute("w:space", "0")
            .endElement()
            .endElement()
            .startElement("w:shd")
            .writeAttribute("w:val", "clear")
            .writeAttribute("w:color", "auto")
            .writeAttribute("w:fill", "F3F4F5")
            .endElement()
            .startElement("w:tcMar")
            .startElement("w:top")
            .writeAttribute("w:w", "55")
            .writeAttribute("w:type", "dxa")
            .endElement()
            .startElement("w:left")
            .writeAttribute("w:w", "55")
            .writeAttribute("w:type", "dxa")
            .endElement()
            .startElement("w:bottom")
            .writeAttribute("w:w", "55")
            .writeAttribute("w:type", "dxa")
            .endElement()
            .startElement("w:right")
            .writeAttribute("w:w", "55")
            .writeAttribute("w:type", "dxa")
            .endElement()
            .endElement()
            .startElement("w:vAlign")
            .writeAttribute("w:val", "center")
            .endElement()
            .endElement()
            .startElement("w:p")
            .startElement("w:pPr")
            .startElement("w:keepNext")
            .writeAttribute("w:val", "0")
            .endElement()
            .startElement("w:keepLines")
            .writeAttribute("w:val", "0")
            .endElement()
            .startElement("w:widowControl")
            .endElement()
            .startElement("w:suppressLineNumbers")
            .writeAttribute("w:val", "0")
            .endElement()
            .startElement("w:bidi")
            .writeAttribute("w:val", "0")
            .endElement()
            .startElement("w:spacing")
            .writeAttribute("w:before", "0")
            .writeAttribute("w:beforeAutospacing", "0")
            .writeAttribute("w:after", "0")
            .writeAttribute("w:afterAutospacing", "0")
            .writeAttribute("w:line", "9")
            .writeAttribute("w:lineRule", "atLeast")
            .endElement()
            .startElement("w:jc")
            .writeAttribute("w:val", "center")
            .endElement()
            .endElement()
            .startElement("w:r")
            .startElement("w:rPr")
            .startElement("w:rFonts")
            .writeAttribute("w:ascii", "Microsoft Sans Serif")
            .writeAttribute("w:hAnsi", "Microsoft Sans Serif")
            .writeAttribute("w:cs", "Microsoft Sans Serif")
            .endElement()
            .startElement("w:b")
            .endElement()
            .startElement("w:bCs")
            .endElement()
            .startElement("w:i")
            .writeAttribute("w:val", "0")
            .endElement()
            .startElement("w:iCs")
            .writeAttribute("w:val", "0")
            .endElement()
            .startElement("w:color")
            .writeAttribute("w:val", "000000")
            .endElement()
            .startElement("w:sz")
            .writeAttribute("w:val", "20")
            .endElement()
            .startElement("w:szCs")
            .writeAttribute("w:val", "20")
            .endElement()
            .startElement("w:u")
            .writeAttribute("w:val", "none")
            .endElement()
            .startElement("w:bdr")
            .writeAttribute("w:val", "none")
            .writeAttribute("w:color", "auto")
            .writeAttribute("w:sz", "0")
            .writeAttribute("w:space", "0")
            .endElement()
            .startElement("w:vertAlign")
            .writeAttribute("w:val", "baseline")
            .endElement()
            .endElement()
            .startElement("w:t")
            .text(col)
            .endElement()
            .endElement()
            .endElement()
            .endElement();
        });

        // end header row tag
        xw_header.endElement();
        data.header_row = xw_header.output;

        // add body data
        worklogItems.forEach((item) => {
            xw_body
            .startElement("w:tr")
            .startElement("w:tblPrEx")
            .startElement("w:tblBorders")
            .startElement("w:top")
            .writeAttribute("w:val", "single")
            .writeAttribute("w:color", "b4c7dc")
            .writeAttribute("w:sz", "4")
            .writeAttribute("w:space", "0")
            .endElement()
            .startElement("w:left")
            .writeAttribute("w:val", "single")
            .writeAttribute("w:color", "b4c7dc")
            .writeAttribute("w:sz", "4")
            .writeAttribute("w:space", "0")
            .endElement()
            .startElement("w:bottom")
            .writeAttribute("w:val", "single")
            .writeAttribute("w:color", "b4c7dc")
            .writeAttribute("w:sz", "4")
            .writeAttribute("w:space", "0")
            .endElement()
            .startElement("w:right")
            .writeAttribute("w:val", "single")
            .writeAttribute("w:color", "b4c7dc")
            .writeAttribute("w:sz", "4")
            .writeAttribute("w:space", "0")
            .endElement()
            .startElement("w:insideH")
            .writeAttribute("w:val", "single")
            .writeAttribute("w:color", "b4c7dc")
            .writeAttribute("w:sz", "4")
            .writeAttribute("w:space", "0")
            .endElement()
            .startElement("w:insideV")
            .writeAttribute("w:val", "single")
            .writeAttribute("w:color", "b4c7dc")
            .writeAttribute("w:sz", "4")
            .writeAttribute("w:space", "0")
            .endElement()
            .endElement()
            .startElement("w:shd")
            .writeAttribute("w:val", "clear")
            .endElement()
            .startElement("w:tblCellMar")
            .startElement("w:top")
            .writeAttribute("w:w", "15")
            .writeAttribute("w:type", "dxa")
            .endElement()
            .startElement("w:left")
            .writeAttribute("w:w", "15")
            .writeAttribute("w:type", "dxa")
            .endElement()
            .startElement("w:bottom")
            .writeAttribute("w:w", "15")
            .writeAttribute("w:type", "dxa")
            .endElement()
            .startElement("w:right")
            .writeAttribute("w:w", "15")
            .writeAttribute("w:type", "dxa")
            .endElement()
            .endElement()
            .endElement()
            .startElement("w:trPr")
            .startElement("w:trHeight")
            .writeAttribute("w:val", "0")
            .writeAttribute("w:hRule", "atLeast")
            .endElement()
            .endElement();

            columnKeys.forEach((key) => {
            xw_body
                .startElement("w:tc")
                .startElement("w:tcPr")
                .startElement("w:tcW")
                .writeAttribute("w:w", "0")
                .writeAttribute("w:type", "auto")
                .endElement()
                .startElement("w:tcBorders")
                .startElement("w:top")
                .writeAttribute("w:val", "single")
                .writeAttribute("w:color", "B4C7DC")
                .writeAttribute("w:sz", "4")
                .writeAttribute("w:space", "0")
                .endElement()
                .startElement("w:bottom")
                .writeAttribute("w:val", "single")
                .writeAttribute("w:color", "B4C7DC")
                .writeAttribute("w:sz", "4")
                .writeAttribute("w:space", "0")
                .endElement()
                .endElement()
                .startElement("w:shd")
                .writeAttribute("w:val", "clear")
                .endElement()
                .startElement("w:tcMar")
                .startElement("w:top")
                .writeAttribute("w:w", "55")
                .writeAttribute("w:type", "dxa")
                .endElement()
                .startElement("w:left")
                .writeAttribute("w:w", "55")
                .writeAttribute("w:type", "dxa")
                .endElement()
                .startElement("w:bottom")
                .writeAttribute("w:w", "55")
                .writeAttribute("w:type", "dxa")
                .endElement()
                .startElement("w:right")
                .writeAttribute("w:w", "55")
                .writeAttribute("w:type", "dxa")
                .endElement()
                .endElement()
                .startElement("w:vAlign")
                .writeAttribute("w:val", "center")
                .endElement()
                .endElement()
                .startElement("w:p")
                .startElement("w:pPr")
                .startElement("w:keepNext")
                .writeAttribute("w:val", "0")
                .endElement()
                .startElement("w:keepLines")
                .writeAttribute("w:val", "0")
                .endElement()
                .startElement("w:widowControl")
                .endElement()
                .startElement("w:suppressLineNumbers")
                .writeAttribute("w:val", "0")
                .endElement()
                .startElement("w:bidi")
                .writeAttribute("w:val", "0")
                .endElement()
                .startElement("w:spacing")
                .writeAttribute("w:before", "0")
                .writeAttribute("w:beforeAutospacing", "0")
                .writeAttribute("w:after", "0")
                .writeAttribute("w:afterAutospacing", "0")
                .writeAttribute("w:line", "9")
                .writeAttribute("w:lineRule", "atLeast")
                .endElement()
                .endElement()
                .startElement("w:r")
                .startElement("w:rPr")
                .startElement("w:rFonts")
                .writeAttribute("w:hint", "default")
                .writeAttribute("w:ascii", "Microsoft Sans Serif")
                .writeAttribute("w:hAnsi", "Microsoft Sans Serif")
                .writeAttribute("w:cs", "Microsoft Sans Serif")
                .endElement()
                .startElement("w:i")
                .writeAttribute("w:val", "0")
                .endElement()
                .startElement("w:iCs")
                .writeAttribute("w:val", "0")
                .endElement()
                .startElement("w:color")
                .writeAttribute("w:val", "000000")
                .endElement()
                .startElement("w:sz")
                .writeAttribute("w:val", "20")
                .endElement()
                .startElement("w:szCs")
                .writeAttribute("w:val", "20")
                .endElement()
                .startElement("w:u")
                .writeAttribute("w:val", "none")
                .endElement()
                .startElement("w:bdr")
                .writeAttribute("w:val", "none")
                .writeAttribute("w:color", "auto")
                .writeAttribute("w:sz", "0")
                .writeAttribute("w:space", "0")
                .endElement()
                .startElement("w:vertAlign")
                .writeAttribute("w:val", "baseline")
                .endElement()
                .endElement()
                .startElement("w:t")
                .text(item[key])
                .endElement()
                .endElement()
                .endElement()
                .endElement();
            });
            // end record row tag
            xw_body.endElement();
        });
        data.body_rows = xw_body.output;
        const rawXml = genRawXmlByTemplate(GridBaseTemplate, data);

        return rawXml;
    } catch (err) {
    logger.error(err);
    }
}